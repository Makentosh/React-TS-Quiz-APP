{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/background.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGimage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","MEDIUM","newQuestions","length","e","currentTarget","prev","answerObject","undefined","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.193e37a6.chunk.js","sourcesContent":["import {shuffleArray} from './utils';\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard'\r\n}\r\n\r\nexport type Question = {\r\n    category: string\r\n    correct_answer: string\r\n    difficulty: string\r\n    incorrect_answers: string[]\r\n    question: string\r\n    type: string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`\r\n    const data = await (await fetch(endpoint)).json()\r\n\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ))\r\n}\r\n","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)\r\n\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border 2px solid #0085a3;\r\n    padding 20px;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0, .25);\r\n    \r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean\r\n    userClicked: boolean\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n      transition: all .3s ease;\r\n      \r\n      :hover {\r\n        opacity: 0.8\r\n      }\r\n      \r\n      button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({correct, userClicked}) => correct \r\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)' \r\n                : !correct && userClicked \r\n                    ? 'linear-gradient(90deg, #ff5656, #c16868)' \r\n                        : 'linear-gradient(90deg, #56ccff, #6eafb4)' };\r\n        \r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n;      }\r\n`\r\n","import React from 'react';\r\nimport {AnswerObject} from '../App';\r\nimport {Wrapper, ButtonWrapper} from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n    question: string\r\n    answers: string[]\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void\r\n    userAnswer: AnswerObject | undefined\r\n    questionNr: number\r\n    totalQuestions: number\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({question,\r\n                                           answers,\r\n                                           callback, userAnswer, questionNr, totalQuestions, ...props}) => {\r\n\r\n    return (\r\n        <Wrapper>\r\n            <p className=\"number\">\r\n                Question: {questionNr} /  {totalQuestions}\r\n            </p>\r\n\r\n            <p dangerouslySetInnerHTML={{ __html: question}}/>\r\n\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <ButtonWrapper key={answer}\r\n                        correct={userAnswer?.correctAnswer === answer}\r\n                        userClicked={userAnswer?.answer === answer}>\r\n                        <button disabled={!!userAnswer}\r\n                                value={answer}\r\n                                onClick={callback}>\r\n                            <span dangerouslySetInnerHTML={{ __html: answer}}/>\r\n                        </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/background.5279ee40.jpg\";","import styled, {createGlobalStyle} from 'styled-components';\r\nimport BGimage from './images/background.jpg'\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    htm {\r\n        height: 100%;\r\n    }\r\n    \r\n    body {\r\n        background-image: url(${BGimage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    \r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Catamaran', sans-serif;\r\n    }\r\n`\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    \r\n    > p {\r\n        color: #fff;\r\n    }\r\n    \r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n    \r\n    h1 {\r\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n         background: rgb(255,255,255);\r\n        background: -moz-linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(135,241,255,1) 100%);\r\n        background: -webkit-linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(135,241,255,1) 100%);\r\n        background: linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(135,241,255,1) 100%);\r\n        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#87f1ff\",GradientType=1);\r\n         background-size: 100%;\r\n         background-clip: text;\r\n         -webkit-background-clip: text;\r\n         -webkit-text-fill-color: transparent;\r\n         -moz-background-clip: text;\r\n         -moz-text-fill-color: transparent;\r\n         filter: drop-shadow(2px 2px #0085a3);\r\n         font-size: 70px;\r\n         font-weight: 400;\r\n         text-align: center;\r\n         margin: 20px;\r\n    }\r\n    \r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: rgb(255,255,255);\r\n        background: -moz-linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(255,204,145,1) 100%);\r\n        background: -webkit-linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(255,204,145,1) 100%);\r\n        background: linear-gradient(180deg, rgba(255,255,255,1) 0%, rgba(255,204,145,1) 100%);\r\n        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#ffffff\",endColorstr=\"#ffcc91\",GradientType=1)\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding 0 40px;\r\n    }\r\n    \r\n    .start {\r\n        max-width: 200px;\r\n        \r\n    }\r\n   \r\n`\r\n","import React, {useState} from 'react';\nimport {Difficulty, fetchQuizQuestions, QuestionState} from './API';\nimport QuestionCard from './components/QuestionCard';\nimport {GlobalStyle, Wrapper} from './App.styles';\n\nexport type AnswerObject = {\n    question: string\n    answer: string\n    correct: boolean\n    correctAnswer: string\n}\n\nconst App = () => {\n    const TOTAL_QUESTIONS = 10\n\n    const [loading, setLoading] = useState(false)\n    const [questions, setQuestions] = useState<QuestionState[]>([])\n    const [number, setNumber] = useState(0)\n    const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n    const [score, setScore] = useState(0)\n    const [gameOver, setGameOver] = useState(true)\n\n\n    const startTrivia = async () => {\n        setLoading(true)\n        setGameOver(false)\n        const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.MEDIUM)\n        setQuestions(newQuestions)\n        setScore(0)\n        setUserAnswers([])\n        setNumber(0)\n        setLoading(false)\n    }\n\n    const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (!gameOver) {\n            const answer = e.currentTarget.value\n            const correct = questions[number].correct_answer === answer\n\n\n            if (correct) {\n                setScore(prev => prev + 1)\n            }\n\n            const answerObject = {\n                question: questions[number].question,\n                answer,\n                correct,\n                correctAnswer: questions[number].correct_answer\n            }\n\n            setUserAnswers(prev => [...prev, answerObject])\n        }\n    }\n\n    const nexQuestion = () => {\n        const nextQuestion = number + 1\n\n        if (nextQuestion === TOTAL_QUESTIONS) {\n            setGameOver(true)\n        } else {\n            setNumber(nextQuestion)\n        }\n    }\n\n    return (\n        <>\n            <GlobalStyle/>\n            <Wrapper>\n                <h1>REACT QUIZ</h1>\n                {gameOver || userAnswers.length === TOTAL_QUESTIONS\n                    ? <button className=\"start\"\n                              onClick={startTrivia}>\n                        Start\n                    </button>\n                    : null}\n\n                {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\n                {loading && <p className=\"gaga\">LoadingQuestions...</p>}\n\n                {(!loading && !gameOver)\n                    ? <QuestionCard questionNr={number + 1}\n                                    answers={questions[number].answers}\n                                    callback={checkAnswer}\n                                    question={questions[number].question}\n                                    totalQuestions={TOTAL_QUESTIONS}\n                                    userAnswer={userAnswers ? userAnswers[number] : undefined}/>\n                    : null\n                }\n\n\n                {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1\n                    ? <button className=\"next\"\n                              onClick={nexQuestion}>\n                        Next question\n                    </button>\n                    : null\n                }\n\n            </Wrapper>\n\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}